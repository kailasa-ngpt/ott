version: '3.8'
services:
  mongo:
    image: mongo:8.0
    container_name: mongodb_container-1
    # ports:
    #  - "27018:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongo-initdb:/docker-entrypoint-initdb.d  # Mount initialization scripts
    environment:
      MONGO_INITDB_DATABASE: mydatabase  # Database name for initialization
    networks:
      - app-network
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' mongodb://localhost:27017/mydatabase --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./Backend
    container_name: backend_container-1
    depends_on:
      mongo:
        condition: service_healthy  # Wait for MongoDB to be healthy
   # ports:
   #   - "4002:4000"
    environment:
      - PORT=4000
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/mydatabase
    restart: unless-stopped
    networks:
      - app-network

  ai-service:
    build:
      context: ./Backend/ai_service
    container_name: ai_service_container
    depends_on:
      - backend
    # ports:
    #   - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - RAG_API_ENDPOINT=${RAG_API_ENDPOINT}
      - PORT=8000
      - HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./Frontend
    container_name: frontend_container-1
    depends_on:
      - backend
      - ai-service
    #ports:
    #  - "4001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3000
      - NEXT_TELEMETRY_DISABLED=1
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data: